/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package action.system;

import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import model.system.BoNode;
import model.system.BoPerson;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.DynaActionForm;
import service.system.BoNodeService;
import service.system.BoPersonService;
import service.system.BoRoleNodeService;
import util.time.CalendarUtil;
import factory.ServiceFactory;


/** 
 * MyEclipse Struts
 * Creation date: 10-28-2008
 * 
 * XDoclet definition:
 * @struts.action
 * @struts.action-forward name="toManagePage" path="/WEB-INF/jsp/test/admin_test_manage.jsp"
 */
public class LoginAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception 
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(request.getParameter("action").equals("toLoginPage")){
		return mapping.findForward("toLoginPage");		
		}
		if(request.getParameter("action").equals("login")){
			BoRoleNodeService boRoleNodeService = (BoRoleNodeService)ServiceFactory.instance().getService("boRoleNodeService");				

			BoNodeService boNodeService = (BoNodeService)ServiceFactory.instance().getService("boNodeService");				
			

			
			String user = request.getParameter("user");
			String pwd = request.getParameter("pwd");
			if(user!=null&&pwd!=null){
			
			BoPersonService boPersonService = (BoPersonService)ServiceFactory.instance().getService("boPersonService");				
			List l = boPersonService.login(user.trim().replace("\'", ""),pwd.trim().replace("\'", ""));
			if(l.size()>0) 
			{
				BoPerson p =(BoPerson)l.get(0);
				BoPerson p1 =new BoPerson();
				p1 = p;
				p.setLoginTimes(p.getLoginTimes()+1);
				p1.setLoginTimes(p.getLoginTimes()+1);
				request.getSession().setAttribute("person",p1);
				p.setLastLoginTime(new CalendarUtil().getTimeForDB());
				boPersonService.updateBoPerson(p);
				
				List nodeFatherRootList = boNodeService.getNodeFatherRoot();

				List l1 =  boRoleNodeService.getRootListByRoleId(p.getRoleId());
				
				request.getSession().setAttribute("nodeFatherRootList", l1);
				
				return mapping.findForward("toFramePage");		
			} 
			else
			{
				return mapping.findForward("toErrorPage");	
			}
			}
			else
			{
				return mapping.findForward("toErrorPage");	
			}
			
		}
		else if(request.getParameter("action").equals("logout")){
			if(request.getSession().getAttribute("person")!=null)
			{
				request.getSession().removeAttribute("person");
			}
			request.getSession().invalidate();
			return mapping.findForward("toLoginPage");		
		} 
		return null;
	}
}