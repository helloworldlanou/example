/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package action.system;

import java.util.Iterator;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import model.system.BoNode;
import model.system.BoPerson;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import service.system.BoNodeService;
import service.system.BoRoleNodeService;
import factory.ServiceFactory;
import util.TokenProcessor;


/** 
 * MyEclipse Struts
 * Creation date: 10-28-2008
 * 
 * XDoclet definition:
 * @struts.action
 * @struts.action-forward name="toManagePage" path="/WEB-INF/jsp/test/admin_test_manage.jsp"
 */
public class MenuAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception 
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(request.getParameter("action").equals("selectNodeId")){
			BoNodeService boNodeService = (BoNodeService)ServiceFactory.instance().getService("boNodeService");				

			request.getSession().setAttribute("selectedNodeId", request.getParameter("id"));


			if(request.getSession().getAttribute("selectedNodeId")!=null){			
				//List nodeChildList = boNodeService.getNodeChildByPid(request.getSession().getAttribute("selectedNodeId").toString());			
				BoNode b = boNodeService.getBoNode(request.getSession().getAttribute("selectedNodeId").toString());
				BoRoleNodeService boRoleNodeService = (BoRoleNodeService)ServiceFactory.instance().getService("boRoleNodeService");				
				List nodeChildList = 	boRoleNodeService.getChildListByRoleId(((BoPerson)(request.getSession().getAttribute("person"))).getRoleId());
				
				
				nodeChildList.remove(b);
				request.getSession().setAttribute("nodeChildList", nodeChildList);
				
				for(Iterator it = nodeChildList.iterator();it.hasNext();)
				{
					BoNode b1 = (BoNode) it.next();
					//System.out.println("===="+b1.getId());
				}
				
					
				}
			
			
			
			//初始化右侧页面内容
			List nodeList = boNodeService.getNodeManage();	
			request.getSession().setAttribute("nodeList", nodeList);
			return mapping.findForward("toMenuPage");		
		}
		
		else if(request.getParameter("action").equals("unSelectNodeId")){
			BoNodeService boNodeService = (BoNodeService)ServiceFactory.instance().getService("boNodeService");				

			request.getSession().setAttribute("selectedNodeId", "-1");
			//初始化右侧页面内容
			List nodeList = boNodeService.getNodeManage();	
			request.getSession().setAttribute("nodeList", nodeList);
			return mapping.findForward("toMenuPage");		
		}
		
		else if(request.getParameter("action").equals("toNodeManage")){
			BoNodeService boNodeService = (BoNodeService)ServiceFactory.instance().getService("boNodeService");				
			List nodeList = boNodeService.getNodeManage();	
			request.getSession().setAttribute("nodeList", nodeList);
			return mapping.findForward("toNodeManagePage");		
		}
		
		else if(request.getParameter("action").equals("nodeManage")){
			BoNodeService boNodeService = (BoNodeService)ServiceFactory.instance().getService("boNodeService");				
			List nodeList = boNodeService.getNodeManage();	
			request.getSession().setAttribute("nodeList", nodeList);
			request.getSession().setAttribute("selectnid",request.getParameter("id"));
			if(!request.getParameter("id").equals("0")){
			BoNode n = boNodeService.getBoNode((String)request.getSession().getAttribute("selectnid"));
			request.getSession().setAttribute("n",n);
			request.getSession().setAttribute("canUp",boNodeService.canUp((String)request.getSession().getAttribute("selectnid")));
			request.getSession().setAttribute("canDown",boNodeService.canDown((String)request.getSession().getAttribute("selectnid")));
			BoNode fn = boNodeService.getNodeParent((String)request.getSession().getAttribute("selectnid"));
			request.getSession().setAttribute("fn",fn);
			request.getSession().setAttribute("canDelete",!boNodeService.hasChildBoNode(n));


			}
			else{
				BoNode n = new BoNode();
				n.setId("0");
				n.setType("father");
				n.setName("系统模块树");
				n.setTitle("系统模块树");
				request.getSession().setAttribute("n",n);
			}
			return mapping.findForward("toNodeManagePage");		
		}
		else if(request.getParameter("action").equals("toAddNodeFather")){		
			request.getSession().setAttribute("selectnid",request.getParameter("id"));
			return mapping.findForward("toAddNodeFather");		
		}
		else if(request.getParameter("action").equals("toAddNodeChild")){		
			BoNodeService boNodeService = (BoNodeService)ServiceFactory.instance().getService("boNodeService");				
			List fileList = boNodeService.listFile(request.getRealPath("/")+"\\image\\icon\\dtree");
			request.getSession().setAttribute("fileList",fileList);
			request.getSession().setAttribute("selectnid",request.getParameter("id"));
			return mapping.findForward("toAddNodeChild");		
		}
		else if(request.getParameter("action").equals("addNodeFather")){
			TokenProcessor processor = TokenProcessor.getInstance();
			if(processor.isTokenValid(request)){
				processor.resetToken(request);
			BoNodeService boNodeService = (BoNodeService)ServiceFactory.instance().getService("boNodeService");				

			String name = request.getParameter("name");
			String open = request.getParameter("open");			
			String rootIcon = request.getParameter("rootIcon");
			BoNode n2 = new BoNode();
			n2.setName(name);
			n2.setOpen(open);
			n2.setIcon("image/icon/dtree/img/folder.gif");
			n2.setIconOpen("image/icon/dtree/img/folderopen.gif");
			n2.setBigIcon(rootIcon);
			n2.setDispIndex(boNodeService.getMaxDispIndex()+1);
		    n2.setType("father");
		    n2.setState("use");
			n2.setParentId(request.getParameter("id"));
			boNodeService.addBoNode(n2);
			//初始化右侧页面内容
			List nodeList = boNodeService.getNodeManage();	
			request.getSession().setAttribute("nodeList", nodeList);
			request.getSession().setAttribute("selectnid",request.getParameter("id"));
			if(!request.getParameter("id").equals("0")){
			BoNode n = boNodeService.getBoNode((String)request.getSession().getAttribute("selectnid"));
			request.getSession().setAttribute("n",n);
			request.getSession().setAttribute("canUp",boNodeService.canUp((String)request.getSession().getAttribute("selectnid")));
			request.getSession().setAttribute("canDown",boNodeService.canDown((String)request.getSession().getAttribute("selectnid")));
			BoNode fn = boNodeService.getNodeParent((String)request.getSession().getAttribute("selectnid"));
			request.getSession().setAttribute("fn",fn);
			request.getSession().setAttribute("canDelete",!boNodeService.hasChildBoNode(n));

			}
			else{
				BoNode n = new BoNode();
				n.setId("0");
				n.setType("father");
				request.getSession().setAttribute("n",n);
				n.setName("系统模块树");
				n.setTitle("系统模块树");
			}
			//初始化菜单内容	
			List nodeFatherRootList = boNodeService.getNodeFatherRoot();
			request.getSession().setAttribute("nodeFatherRootList", nodeFatherRootList);
			List nodeChildList = boNodeService.getNodeChildByPid((String)request.getSession().getAttribute("selectedNodeId"));
			request.getSession().setAttribute("nodeChildList", nodeChildList);
			
			}else{
				//System.out.println("重复提交！");
			}
			return mapping.findForward("toFramePage");		
		}
		
		else if(request.getParameter("action").equals("addNodeChild")){
			TokenProcessor processor = TokenProcessor.getInstance();
			if(processor.isTokenValid(request)){
				processor.resetToken(request);
			BoNodeService boNodeService = (BoNodeService)ServiceFactory.instance().getService("boNodeService");				

			String name = request.getParameter("name");
			String state =  request.getParameter("state");
			String icon = request.getParameter("icon");
			String url = request.getParameter("url");
			BoNode n2 = new BoNode();
			n2.setName(name);
			n2.setState(state);
			n2.setIcon(icon);
			n2.setIconOpen(icon);
			n2.setTarget("frmView");
			n2.setOpen("false");
			n2.setUrl(url);
			if(state.equals("nouse")){
				n2.setUrl("construction.do");
			}
			n2.setTitle(name);
			n2.setDispIndex(boNodeService.getMaxDispIndex()+1);
		    n2.setType("child");
			n2.setParentId(request.getParameter("id"));
			boNodeService.addBoNode(n2);
			
			
			//初始化右侧页面内容
			List nodeList = boNodeService.getNodeManage();	
			request.getSession().setAttribute("nodeList", nodeList);
			request.getSession().setAttribute("selectnid",request.getParameter("id"));
			if(!request.getParameter("id").equals("0")){
			BoNode n = boNodeService.getBoNode((String)request.getSession().getAttribute("selectnid"));
			request.getSession().setAttribute("n",n);
			request.getSession().setAttribute("canUp",boNodeService.canUp((String)request.getSession().getAttribute("selectnid")));
			request.getSession().setAttribute("canDown",boNodeService.canDown((String)request.getSession().getAttribute("selectnid")));
			BoNode fn = boNodeService.getNodeParent((String)request.getSession().getAttribute("selectnid"));
			request.getSession().setAttribute("fn",fn);
			request.getSession().setAttribute("canDelete",!boNodeService.hasChildBoNode(n));

			}
			else{
				BoNode n = new BoNode();
				n.setId("0");
				n.setType("father");
				request.getSession().setAttribute("n",n);
				n.setName("系统模块树");
				n.setTitle("系统模块树");
			}
			//初始化菜单内容	
			List nodeFatherRootList = boNodeService.getNodeFatherRoot();
			request.getSession().setAttribute("nodeFatherRootList", nodeFatherRootList);
			List nodeChildList = boNodeService.getNodeChildByPid((String)request.getSession().getAttribute("selectedNodeId"));
			request.getSession().setAttribute("nodeChildList", nodeChildList);
			
			}
			else{
				//System.out.println("重复提交！");
				
			}
			return mapping.findForward("toFramePage");		
		}
		
		
		else if(request.getParameter("action").equals("toAddNodeRootFather")){
			BoNodeService boNodeService = (BoNodeService)ServiceFactory.instance().getService("boNodeService");				
			List fileList = boNodeService.listRootFile(request.getRealPath("/")+"\\image\\icon\\menu_botton");
			request.getSession().setAttribute("fileList",fileList);
			request.getSession().setAttribute("selectnid",request.getParameter("id"));			
			return mapping.findForward("toAddNodeFather");		
		}
		
		else if(request.getParameter("action").equals("moveUp")){
			TokenProcessor processor = TokenProcessor.getInstance();
			if(processor.isTokenValid(request)){
				processor.resetToken(request);
			BoNodeService boNodeService = (BoNodeService)ServiceFactory.instance().getService("boNodeService");				
			boNodeService.moveUp(request.getParameter("id"));
			//初始化右侧页面内容
			List nodeList = boNodeService.getNodeManage();	
			request.getSession().setAttribute("nodeList", nodeList);
			request.getSession().setAttribute("selectnid",request.getParameter("id"));
			if(!request.getParameter("id").equals("0")){
			BoNode n = boNodeService.getBoNode((String)request.getSession().getAttribute("selectnid"));
			request.getSession().setAttribute("n",n);
			request.getSession().setAttribute("canUp",boNodeService.canUp((String)request.getSession().getAttribute("selectnid")));
			request.getSession().setAttribute("canDown",boNodeService.canDown((String)request.getSession().getAttribute("selectnid")));
			BoNode fn = boNodeService.getNodeParent((String)request.getSession().getAttribute("selectnid"));
			request.getSession().setAttribute("fn",fn);
			request.getSession().setAttribute("canDelete",!boNodeService.hasChildBoNode(n));
			}
			else{
				BoNode n = new BoNode();
				n.setId("0");
				n.setType("father");
				request.getSession().setAttribute("n",n);
				n.setName("系统模块树");
				n.setTitle("系统模块树");
			}
			//初始化菜单内容	
			List nodeFatherRootList = boNodeService.getNodeFatherRoot();
			request.getSession().setAttribute("nodeFatherRootList", nodeFatherRootList);	
			List nodeChildList = boNodeService.getNodeChildByPid((String)request.getSession().getAttribute("selectedNodeId"));
			request.getSession().setAttribute("nodeChildList", nodeChildList);
			}
			else{
				processor.saveToken(request);
				//System.out.println("重复提交！");
			}
			return mapping.findForward("toFramePage");		
		}
		
		else if(request.getParameter("action").equals("moveDown")){
			TokenProcessor processor = TokenProcessor.getInstance();
			if(processor.isTokenValid(request)){
				processor.resetToken(request);
			BoNodeService boNodeService = (BoNodeService)ServiceFactory.instance().getService("boNodeService");				
			boNodeService.moveDown(request.getParameter("id"));
			//初始化右侧页面内容
			List nodeList = boNodeService.getNodeManage();	
			request.getSession().setAttribute("nodeList", nodeList);
			request.getSession().setAttribute("selectnid",request.getParameter("id"));
			if(!request.getParameter("id").equals("0")){
			BoNode n = boNodeService.getBoNode((String)request.getSession().getAttribute("selectnid"));
			request.getSession().setAttribute("n",n);
			request.getSession().setAttribute("canUp",boNodeService.canUp((String)request.getSession().getAttribute("selectnid")));
			request.getSession().setAttribute("canDown",boNodeService.canDown((String)request.getSession().getAttribute("selectnid")));
			BoNode fn = boNodeService.getNodeParent((String)request.getSession().getAttribute("selectnid"));
			request.getSession().setAttribute("fn",fn);
			request.getSession().setAttribute("canDelete",!boNodeService.hasChildBoNode(n));

			}
			else{
				BoNode n = new BoNode();
				n.setId("0");
				n.setType("father");
				request.getSession().setAttribute("n",n);
				n.setName("系统模块树");
				n.setTitle("系统模块树");
			}
			//初始化菜单内容	
			List nodeFatherRootList = boNodeService.getNodeFatherRoot();
			request.getSession().setAttribute("nodeFatherRootList", nodeFatherRootList);	
			List nodeChildList = boNodeService.getNodeChildByPid((String)request.getSession().getAttribute("selectedNodeId"));
			request.getSession().setAttribute("nodeChildList", nodeChildList);
			}else{
				
				//System.out.println("重复提交！");
			}
		return mapping.findForward("toFramePage");		
		}
		
		else if(request.getParameter("action").equals("delete")){
			TokenProcessor processor = TokenProcessor.getInstance();
			if(processor.isTokenValid(request)){
				processor.resetToken(request);
			BoNodeService boNodeService = (BoNodeService)ServiceFactory.instance().getService("boNodeService");				
			
			
			boNodeService.deleteBoNode(request.getParameter("id"));
			//初始化右侧页面内容
			List nodeList = boNodeService.getNodeManage();	
			request.getSession().setAttribute("nodeList", nodeList);
			request.getSession().setAttribute("selectnid","0");
				BoNode n = new BoNode();
				n.setId("0");
				n.setType("father");
				request.getSession().setAttribute("n",n);
				n.setName("系统模块树");
				n.setTitle("系统模块树");	
				//初始化菜单内容	
				List nodeFatherRootList = boNodeService.getNodeFatherRoot();
				request.getSession().setAttribute("nodeFatherRootList", nodeFatherRootList);
				List nodeChildList = boNodeService.getNodeChildByPid((String)request.getSession().getAttribute("selectedNodeId"));
				request.getSession().setAttribute("nodeChildList", nodeChildList);
			}else{
				//System.out.println("重复提交！");
			}
			return mapping.findForward("toFramePage");		
		}
		
		else if(request.getParameter("action").equals("toModifyPage")){	
			BoNodeService boNodeService = (BoNodeService)ServiceFactory.instance().getService("boNodeService");		
			request.getSession().setAttribute("selectnid",request.getParameter("id"));
			BoNode fn = boNodeService.getNodeParent((String)request.getSession().getAttribute("selectnid"));
			request.getSession().setAttribute("fn",fn);
			List fileList = boNodeService.listFile(request.getRealPath("/")+"\\image\\icon\\dtree");
			request.getSession().setAttribute("fileList",fileList);
			List rootFileList = boNodeService.listRootFile(request.getRealPath("/")+"\\image\\icon\\menu_botton");
			request.getSession().setAttribute("rootFileList",rootFileList);	
			return mapping.findForward("toNodeModify");		
		}
		
		else if(request.getParameter("action").equals("modify")){
			TokenProcessor processor = TokenProcessor.getInstance();
			if(processor.isTokenValid(request)){
				processor.resetToken(request);
			request.getSession().setAttribute("selectnid",request.getParameter("id"));
			BoNodeService boNodeService = (BoNodeService)ServiceFactory.instance().getService("boNodeService");				
			BoNode b = boNodeService.getBoNode((String)request.getSession().getAttribute("selectnid"));
			if(b.getType().equals("father")){
				b.setName(request.getParameter("name"));				
				if(b.getParentId().equals("0")){
					String bigIcon = request.getParameter("bigIcon");
					b.setBigIcon(bigIcon);
				}
				boNodeService.updateBoNode(b);
			}
			if(b.getType().equals("child")){
				b.setName(request.getParameter("name"));
				b.setUrl(request.getParameter("url"));
				b.setState(request.getParameter("state"));
				b.setIcon(request.getParameter("icon"));
				b.setIconOpen(request.getParameter("icon"));
				boNodeService.updateBoNode(b);
				
			}
			//初始化右侧页面内容
			List nodeList = boNodeService.getNodeManage();	
			request.getSession().setAttribute("nodeList", nodeList);
			request.getSession().setAttribute("selectnid",request.getParameter("id"));
			if(!request.getParameter("id").equals("0")){
			BoNode n = boNodeService.getBoNode((String)request.getSession().getAttribute("selectnid"));
			request.getSession().setAttribute("n",n);
			request.getSession().setAttribute("canUp",boNodeService.canUp((String)request.getSession().getAttribute("selectnid")));
			request.getSession().setAttribute("canDown",boNodeService.canDown((String)request.getSession().getAttribute("selectnid")));
			BoNode fn = boNodeService.getNodeParent((String)request.getSession().getAttribute("selectnid"));
			request.getSession().setAttribute("fn",fn);
			request.getSession().setAttribute("canDelete",!boNodeService.hasChildBoNode(n));

			}
			else{
				BoNode n = new BoNode();
				n.setId("0");
				n.setType("father");
				request.getSession().setAttribute("n",n);
				n.setName("系统模块树");
				n.setTitle("系统模块树");
			}
			//初始化菜单内容		
			List nodeChildList = boNodeService.getNodeChildByPid((String)request.getSession().getAttribute("selectedNodeId"));
			request.getSession().setAttribute("nodeChildList", nodeChildList);
			List nodeFatherRootList = boNodeService.getNodeFatherRoot();
			request.getSession().setAttribute("nodeFatherRootList", nodeFatherRootList);
			}else{
				//System.out.println("重复提交！");
			}
			return mapping.findForward("toFramePage");	
		}
		
		BoNodeService boNodeService = (BoNodeService)ServiceFactory.instance().getService("boNodeService");			
		List nodeList = boNodeService.getNodeManage();	
		request.getSession().setAttribute("nodeList", nodeList);
		request.getSession().setAttribute("selectnid","0");
			BoNode n = new BoNode();
			n.setId("0");
			n.setType("father");
			request.getSession().setAttribute("n",n);
			n.setName("系统模块树");
			n.setTitle("系统模块树");	
		return mapping.findForward("toNodeManagePage");
	}
}
