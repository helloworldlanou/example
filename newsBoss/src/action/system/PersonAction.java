/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package action.system;

import java.sql.Date;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import model.system.BoDepartment;
import model.system.BoPerson;
import model.system.DtreeNode;
import model.system.PageList;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.DynaActionForm;

import service.system.BoDepartmentService;
import service.system.BoPersonService;
import service.system.BoRoleService;
import factory.ServiceFactory;

public class PersonAction extends Action {

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {

		if(request.getParameter("action").equals("toManagePage")){
			DynaActionForm pageListForm = (DynaActionForm)form;
			BoPersonService s = (BoPersonService)ServiceFactory.instance().getService("boPersonService");		
			PageList pageList = new PageList();
			if(pageListForm.get("fetch")!=null){
			pageList.setFetch(Integer.parseInt(pageListForm.get("fetch").toString()));
			}
			if(pageListForm.get("pagenum")!=null){
			pageList.setPagenum(Integer.parseInt(pageListForm.get("pagenum").toString()));	
			}
			Map map = s.getBoPersonMap(pageList);
			pageList = (PageList)map.get("pageList");
			List list = (List)map.get("list");
			
			request.setAttribute("pageList", pageList);			
			request.setAttribute("list", list);
			return mapping.findForward("toManagePage");		
		}
		
		else if(request.getParameter("action").equals("toAddPerson")){
			BoDepartmentService ds = (BoDepartmentService)ServiceFactory.instance().getService("boDepartmentService");		
			String id = request.getParameter("id");
			BoDepartment dn = ds.getBoDepartment(id);
			request.setAttribute("dn", dn);
			 treeInit( mapping,  form,
						 request,  response);
			selectinit( mapping,form,
					 request,  response);
			return mapping.findForward("toAddPage");		
		}
		
		else if(request.getParameter("action").equals("toModifyPage")){
			BoPersonService s = (BoPersonService)ServiceFactory.instance().getService("boPersonService");		
			String id = request.getParameter("id");
			BoPerson n = s.getBoPerson(id);
			request.setAttribute("n", n);
			treeInit( mapping,  form, request,  response);
			selectinit( mapping,form,
					 request,  response);
			return mapping.findForward("toModifyPage");		
		}
		
		else if(request.getParameter("action").equals("modify")){
			BoPersonService ps = (BoPersonService)ServiceFactory.instance().getService("boPersonService");		
			String id = request.getParameter("id");
			BoPerson p = ps.getBoPerson(id);
			String name = request.getParameter("name");
			
			String sex = request.getParameter("sex");
			String userName = request.getParameter("username");
			String duty = request.getParameter("duty");
			String depname = request.getParameter("depname");
			String roleId = request.getParameter("roleId");
			BoRoleService rs = (BoRoleService)ServiceFactory.instance().getService("boRoleService");		
			if(!roleId.equals("-1"))
			{
				p.setRoleId(roleId);
				p.setRoleName(rs.getBoRole(roleId).getName());
			}
			if(roleId.equals("-1"))
			{
				p.setRoleId("");
				p.setRoleName("");
			}
			p.setDepName(depname);
			p.setDuty(duty);
			p.setSex(sex);
			p.setName(name);
			p.setUserName(userName);
			ps.updateBoPerson(p);
			 treeInit( mapping,  form,
						 request,  response);
			 BoPerson n = ps.getBoPerson(id);
			 request.setAttribute("n", n);
			 request.setAttribute("type", "peo");
			return mapping.findForward("toDepManagePage");		
		}
		
		else if(request.getParameter("action").equals("addPerson")){
			BoPersonService ps = (BoPersonService)ServiceFactory.instance().getService("boPersonService");		
			BoDepartmentService boDepartmentService = (BoDepartmentService)ServiceFactory.instance().getService("boDepartmentService");							
			BoRoleService rs = (BoRoleService)ServiceFactory.instance().getService("boRoleService");		

			BoPerson p = new BoPerson();
			String name = request.getParameter("name");
			String id = request.getParameter("id");
			String sex = request.getParameter("sex");
			String userName = request.getParameter("username");
			String pwd =util.encode.MD5.encode2("888888");
			String duty = request.getParameter("duty");
			String depname = request.getParameter("depname");
			String roleId = request.getParameter("roleId");
			
			if(!roleId.equals("-1"))
			{
				p.setRoleId(roleId);
				p.setRoleName(rs.getBoRole(roleId).getName());
			}
			p.setDepName(depname);
			p.setDuty(duty);
			p.setPassword(pwd);
			p.setRegisterTime(new util.time.CalendarUtil().getTimeForDB());
			p.setSex(sex);
			p.setName(name);
			p.setUserName(userName);
			p.setParentId(id);
			p.setDispIndex(ps.getMaxDispIndex()+1);
			
			p.setLoginTimes(0); 
			p.setLastLoginTime("");
			ps.addBoPerson(p);
			//
			 treeInit( mapping,  form,
					 request,  response);
			request.setAttribute("type", "dep");
			BoDepartment n =boDepartmentService.getBoDepartment(id);	
			request.setAttribute("n", n);
			BoDepartment fn = boDepartmentService.getBoDepartment(n.getParentId());
			request.setAttribute("fn", fn);
			return mapping.findForward("toDepManagePage");		
		}
		
		else if(request.getParameter("action").equals("toSelectIcon")){
			BoDepartmentService boDepartmentService = (BoDepartmentService)ServiceFactory.instance().getService("boDepartmentService");				
			List fileList = boDepartmentService.listFile(request.getRealPath("/")+"\\image\\icon\\dtree");
			request.getSession().setAttribute("fileList",fileList);
			BoPersonService boPersonService = (BoPersonService)ServiceFactory.instance().getService("boPersonService");				
			BoPerson b = boPersonService.getBoPerson("0");
			String icon  = b.getIcon();
			treeInit( mapping,  form,
					 request,  response);	
			request.setAttribute("type", "dep");
			request.setAttribute("icon", icon);
			return mapping.findForward("toIconPage");		
		}
		
		else if(request.getParameter("action").equals("selectIcon")){
			BoPersonService ps = (BoPersonService)ServiceFactory.instance().getService("boPersonService");		
	
			String icon = request.getParameter("icon");
			
			BoPerson bdid0 = ps.getBoPerson("0");
			bdid0.setIcon(icon);
			bdid0.setIconOpen(icon);
			ps.updateBoPerson(bdid0);
			treeInit( mapping,  form,
					 request,  response);
			request.setAttribute("type", "dep");
			return mapping.findForward("toDepManagePage");		
		}
		
		else if(request.getParameter("action").equals("personManage")){
			treeInit(mapping,form,request,response);
			String id = request.getParameter("id");
			BoPersonService boPersonService = (BoPersonService)ServiceFactory.instance().getService("boPersonService");				
			BoPerson n = boPersonService.getBoPerson(id);
			request.setAttribute("n", n);
			request.setAttribute("type", "peo");
			request.setAttribute("canDelete", true);
			return mapping.findForward("toDepManagePage");		
		}
		
		else if(request.getParameter("action").equals("delete")){
			
			String id = request.getParameter("id");
			BoPersonService boPersonService = (BoPersonService)ServiceFactory.instance().getService("boPersonService");				
			boPersonService.deleteBoPerson(id);
			treeInit(mapping,form,request,response);
			return mapping.findForward("toDepManagePage");		
		}
		
		else if(request.getParameter("action").equals("toPwdChange")){
			
			return mapping.findForward("toPwdChange");		
		}
		else if(request.getParameter("action").equals("pwdChange")){
			if(request.getParameter("oldpassword").trim().length()>0&&request.getParameter("newpassword").trim().length()>0&&request.getParameter("newpasswordconfirm").trim().length()>0)
			{
			String s1 = request.getParameter("oldpassword");
			String s2 = request.getParameter("newpassword");
			String s3 = request.getParameter("newpasswordconfirm");
			if(!util.encode.MD5.encode2(s1).equals(((BoPerson)request.getSession().getAttribute("person")).getPassword()))
			{
				request.setAttribute("remind", "旧密码输入有误，请重新输入");
			}
			else
			{
			if(!s2.equals(s3))
					{
						request.setAttribute("remind", "两次输入不一致，请重新输入");
					}
			
			else
			{
				BoPerson p = ((BoPerson)request.getSession().getAttribute("person"));
				p.setPassword(util.encode.MD5.encode2(s3));
				request.getSession().setAttribute("person", p);
				BoPersonService boPersonService = (BoPersonService)ServiceFactory.instance().getService("boPersonService");				
				BoPerson p1 =  boPersonService.getBoPerson(p.getId());
				p1.setPassword(util.encode.MD5.encode2(s3));
				boPersonService.updateBoPerson(p1);
				request.setAttribute("right", "密码修改成功");
				
			}
				} 
			}
			else
			{
				
				request.setAttribute("remind", "输入不应为空");
			}
			
			return mapping.findForward("toPwdChange");		
		}
		else if(request.getParameter("action").equals("toModifyInfo")){
			
			return mapping.findForward("toModifyInfo");		
		}
		
		else if(request.getParameter("action").equals("modifyInfo")){
			if(request.getParameter("name").length()>0&&request.getParameter("username").length()>0)
			{
				String s1 = request.getParameter("name");
				String s2 = request.getParameter("username");
				String s3 = request.getParameter("sex");
				BoPerson b = (BoPerson)request.getSession().getAttribute("person");
				b.setUserName(s2);
				b.setName(s1);
				b.setSex(s3);
				BoPersonService boPersonService = (BoPersonService)ServiceFactory.instance().getService("boPersonService");				
				boPersonService.updateBoPerson(b);
				request.getSession().setAttribute("person", b);
				request.setAttribute("right", "修改成功");
			}
			else 
			{
				request.setAttribute("remind", "输入不能为空");
			}
			return mapping.findForward("toModifyInfo");		
		}
		
		return null;
	}
	
	public void selectinit(ActionMapping mapping, ActionForm form,
	HttpServletRequest request, HttpServletResponse response) throws Exception
	{
		BoRoleService rs = (BoRoleService)ServiceFactory.instance().getService("boRoleService");		
		List roleIdList = rs.getList();
		request.setAttribute("roleIdList", roleIdList);
	}
	
	public void treeInit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception 
			{
		BoDepartmentService boDepartmentService = (BoDepartmentService)ServiceFactory.instance().getService("boDepartmentService");				
		BoPersonService boPersonService = (BoPersonService)ServiceFactory.instance().getService("boPersonService");				

		List list = boDepartmentService.getNodeManage();
		BoDepartment bdid0 = boDepartmentService.getBoDepartment("0");
		String bdIcon = bdid0.getIcon();
		String bdIconOpen = bdid0.getIconOpen();
		
		BoPerson bpid0 = boPersonService.getBoPerson("0");
		String bpIcon = bpid0.getIcon();
		String bpIconOpen = bpid0.getIconOpen();
		
		List depList = new ArrayList();
		for(Iterator it = list.iterator();it.hasNext();)
		{
			BoDepartment bd = (BoDepartment)it.next();
			DtreeNode dn = new DtreeNode();
			dn.setDispindex(bd.getDispIndex());
			dn.setIcon(bdIcon);
			dn.setIconOpen(bdIconOpen);
			dn.setId(bd.getId());
			dn.setName(bd.getName());
			dn.setOpen("true");
			dn.setParentId(bd.getParentId());
			dn.setTarget("");
			dn.setTitle("");
			dn.setUrl("departmentAction.do?action=departmentManage&id="+bd.getId());
			depList.add(dn);
			List l = boPersonService.getBoPersonByParentId(dn.getId());
			for(Iterator it1 = l.iterator();it1.hasNext();)
			{
				DtreeNode dn1 = new DtreeNode();
				BoPerson bp = (BoPerson)it1.next();
				dn1.setDispindex(bp.getDispIndex());
				dn1.setIcon(bpIcon);
				dn1.setIconOpen(bpIconOpen);
				dn1.setId(bp.getId());
				dn1.setName(bp.getName());
				dn1.setOpen("true");
				dn1.setParentId(bp.getParentId());
				dn1.setTarget("");
				dn1.setTitle("");
				dn1.setUrl("personAction.do?action=personManage&id="+bp.getId());
				depList.add(dn1);
			}
		}
		java.util.Collections.sort(depList);
		request.setAttribute("depList", depList);
			}
}