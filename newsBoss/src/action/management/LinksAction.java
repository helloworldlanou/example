/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package action.management;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import model.management.BoLinks;
import model.management.BoLinksSort;
import model.system.PageList;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.DynaActionForm;

import service.management.BoLinksService;
import service.management.BoLinksSortService;
import factory.ServiceFactory;

/** 
 * MyEclipse Struts
 * Creation date: 02-10-2009
 * 
 * XDoclet definition:
 * @struts.action parameter="action" scope="request" validate="true"
 */ 
public class LinksAction extends Action {
 
	/** 
	 * Method execute
	 * @author WangZ
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		//System.out.println(request.getParameter("action"));
		//添加新链接
		if(request.getParameter("action").equals("addLinks")){
			
			if(request.getParameter("name").length()>0&&request.getParameter("url").length()>0)
			{
				BoLinksSortService boLinksSortService = (BoLinksSortService)ServiceFactory.instance().getService("boLinksSortService");	
				String name = request.getParameter("name");
				String url = request.getParameter("url");
				String sortid=request.getParameter("select_sort");
				BoLinksSort sort=boLinksSortService.getBoLinksSort(sortid);
				
				Date date=new Date();
				
				BoLinks b = new BoLinks();
				b.setName(name);
				b.setUrl(url);
				b.setBoLinksSort(sort);
				b.setTime(date);
				BoLinksService boLinksService = (BoLinksService)ServiceFactory.instance().getService("boLinksService");				
				boLinksService.addBoLinks(b);
				request.setAttribute("right", "添加成功");
				
				request.setAttribute("mes", b);
			}
			else 
			{
				request.setAttribute("remind", "输入不能为空,添加不成功");
				return new ActionForward("/linksAction.do?action=toAddPage"); 
			}
			BoLinksSortService s = (BoLinksSortService)ServiceFactory.instance().getService("boLinksSortService");	
			List list=s.getAllBoLinksSort();
			request.setAttribute("sortlist", list);
			return mapping.findForward("toModifyLinksPage");		
		}
		//转到添加新链接的页面
		else if (request.getParameter("action").equals("toAddPage"))
		{
			BoLinksSortService s = (BoLinksSortService)ServiceFactory.instance().getService("boLinksSortService");
			
			if(!s.isnull()){
			List sortlist=s.getAllBoLinksSort();
			request.setAttribute("sortlist", sortlist);
			return mapping.findForward("toAddPage");
			}
			//无类别 则转到添加 链接 类别的页面
			else
			{
				String remind="没有所属类别，请先添加类别";
				request.setAttribute("remind", remind);
				return mapping.findForward("toAddLinksSortPage");
			}
		}
		//转到管理链接的页面
		else if (request.getParameter("action").equals("toManagePage"))
		{
			DynaActionForm pageListForm = (DynaActionForm)form;
			BoLinksService s = (BoLinksService)ServiceFactory.instance().getService("boLinksService");		
			PageList pageList = new PageList();
			if(pageListForm.get("fetch")!=null){
			pageList.setFetch(Integer.parseInt(pageListForm.get("fetch").toString()));
			}
			if(pageListForm.get("pagenum")!=null){
			pageList.setPagenum(Integer.parseInt(pageListForm.get("pagenum").toString()));	
			}
			Map map = s.getBoLinksMap(pageList);
			pageList = (PageList)map.get("pageList");
			List list = (List)map.get("list");
			
			request.setAttribute("pageList", pageList);			
			request.setAttribute("list", list);
			
			return mapping.findForward("toManagePage");
		}
		//删除链接
		else if (request.getParameter("action").equals("delete"))
		{			
			BoLinksService s = (BoLinksService)ServiceFactory.instance().getService("boLinksService");		
			s.deleteBoLinks(request.getParameter("id"));			
			//return mapping.findForward("toManagePage");
			return new ActionForward("/linksAction.do?action=toManagePage"); 
		}
		//转到添加新的类别的页面
		else if(request.getParameter("action").equals("toAddLinksSortPage")){
			
			return mapping.findForward("toAddLinksSortPage");
		}
		//添加新的类别
		else if(request.getParameter("action").equals("addLinksSort")){
			if(request.getParameter("name").length()>0){
				BoLinksSortService s = (BoLinksSortService)ServiceFactory.instance().getService("boLinksSortService");	
				BoLinksSort n=new BoLinksSort();
				n.setSortname(request.getParameter("name"));
				n.setCreatetime(new Date());
				if(s.isnull()){
					n.setSerial(1);	
				}
				else{
					n.setSerial(s.getMaxSerial()+1);
				}
				s.addBoLinksSort(n);
				request.setAttribute("right", "添加成功");
			}else
			{
				request.setAttribute("remind", "不能为空");
			}
			return mapping.findForward("toAddLinksSortPage");
		}
		//修改链接
		else if(request.getParameter("action").equals("modifyLinks")){

			BoLinksService s = (BoLinksService)ServiceFactory.instance().getService("boLinksService");
			String linksid=request.getParameter("id");
			BoLinks b=s.getBoLinks(linksid);
			request.setAttribute("mes", b);
			if(request.getParameter("name").length()>0&&request.getParameter("url").length()>0){
				b.setName(request.getParameter("name"));
				b.setTime(new Date());
				b.setUrl(request.getParameter("url"));							
				BoLinksSortService boLinksSortService = (BoLinksSortService)ServiceFactory.instance().getService("boLinksSortService");	
				String sortid=request.getParameter("select_sort");
				BoLinksSort sort=boLinksSortService.getBoLinksSort(sortid);
				b.setBoLinksSort(sort);
				s.updateBoLinks(b);
				request.setAttribute("right", "修改成功");
			}
			else{
				request.setAttribute("remind", "输入不能为空,添加不成功");
			}
			BoLinksSortService se = (BoLinksSortService)ServiceFactory.instance().getService("boLinksSortService");	
			List list=se.getAllBoLinksSort();
			request.setAttribute("sortlist", list);
		
			//request.setAttribute("id",linksid);
			return mapping.findForward("toModifyLinksPage");
		}
		//转到修改链接的页面
		else if(request.getParameter("action").equals("toModifyLinksPage")){
			BoLinksSortService s = (BoLinksSortService)ServiceFactory.instance().getService("boLinksSortService");	
			List list=s.getAllBoLinksSort();
			request.setAttribute("sortlist", list);
			
			BoLinksService se = (BoLinksService)ServiceFactory.instance().getService("boLinksService");
			BoLinks b=se.getBoLinks(request.getParameter("id"));
			request.setAttribute("mes", b);
			return mapping.findForward("toModifyLinksPage");
		}
		//转到类别管理的页面
		else if(request.getParameter("action").equals("toLinksSortManagePage")){
			BoLinksSortService s = (BoLinksSortService)ServiceFactory.instance().getService("boLinksSortService");	
			List list=s.getAllBoLinksSort();
			request.setAttribute("list", list);

			return mapping.findForward("toLinksSortManagePage");
		}
		//modifyLinksSort修改类别
		else if(request.getParameter("action").equals("modifyLinksSort")){
			if(request.getParameter("name").length()>0){
				BoLinksSortService s = (BoLinksSortService)ServiceFactory.instance().getService("boLinksSortService");	
				BoLinksSort b=s.getBoLinksSort(request.getParameter("id"));
				request.setAttribute("n", b);
				
				b.setSortname(request.getParameter("name"));
				s.updateBoLinksSort(b);
				request.setAttribute("right", "修改成功");
				request.setAttribute("n", b);
			}
			else{
				request.setAttribute("remind", "输入不能为空,添加不成功");
			}
			//return mapping.findForward("toModifyLinksSortPage");
			return new ActionForward("/linksAction.do?action=toModifyLinksSortPage"); 
		}
		//toModifyLinksSortPage转到修改类别的页面
		else if(request.getParameter("action").equals("toModifyLinksSortPage")){
			BoLinksSortService s = (BoLinksSortService)ServiceFactory.instance().getService("boLinksSortService");
			String id =request.getParameter("id");
			BoLinksSort b=s.getBoLinksSort(id);
			request.setAttribute("n", b);
			return mapping.findForward("toModifyLinksSortPage");
		}
		//删除类别
		else if(request.getParameter("action").equals("deletesort")){

			BoLinksSortService s = (BoLinksSortService)ServiceFactory.instance().getService("boLinksSortService");
			if(s.isthisnull(request.getParameter("id"))){
			s.deleteBoLinksSort(request.getParameter("id"))	;
			}else{
				request.setAttribute("remind", "此类别下仍有链接，请先删除此类别下的链接");
			}
			
			return new ActionForward("/linksAction.do?action=toLinksSortManagePage");
		}
		//LinksSortMoveUp类别上移
		else if(request.getParameter("action").equals("LinksSortMoveUp")){

			BoLinksSortService s = (BoLinksSortService)ServiceFactory.instance().getService("boLinksSortService");
			s.moveUp(request.getParameter("id"));			
			return new ActionForward("/linksAction.do?action=toLinksSortManagePage");
		}
		//LinksSortMoveDown类别下移
		else if(request.getParameter("action").equals("LinksSortMoveDown")){

			BoLinksSortService s = (BoLinksSortService)ServiceFactory.instance().getService("boLinksSortService");
			String aaa=request.getParameter("id");
			s.moveDown(request.getParameter("id"));			
			return new ActionForward("/linksAction.do?action=toLinksSortManagePage");
		}
		return null;
		
	}
}